generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  budgets       Budget[]
  categories    Category[]
  insights      Insight[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Float
  description String
  date        DateTime
  type        TransactionType
  categoryId  String?
  merchant    String?
  receiptUrl  String?
  isRecurring Boolean  @default(false)
  confidence  Float?   // AI confidence score for categorization
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id])

  @@index([userId, date])
  @@index([userId, categoryId])
}

model Category {
  id           String        @id @default(cuid())
  name         String
  color        String
  icon         String
  userId       String?       // null for default categories
  type         TransactionType
  transactions Transaction[]
  budgets      Budget[]
  createdAt    DateTime      @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
}

model Budget {
  id         String   @id @default(cuid())
  userId     String
  categoryId String
  amount     Float
  period     BudgetPeriod
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])

  @@unique([userId, categoryId, period, startDate])
}

model Insight {
  id        String      @id @default(cuid())
  userId    String
  type      InsightType
  title     String
  content   String      @db.Text
  data      Json?       // Additional structured data
  priority  Int         @default(0)
  isRead    Boolean     @default(false)
  createdAt DateTime    @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum BudgetPeriod {
  WEEKLY
  MONTHLY
  YEARLY
}

enum InsightType {
  SPENDING_PATTERN
  BUDGET_ALERT
  SAVING_OPPORTUNITY
  UNUSUAL_ACTIVITY
  PREDICTION
}